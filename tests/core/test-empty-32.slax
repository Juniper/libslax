version 1.1;

ns bit extension = "http://xml.libslax.org/bit";

match / {
     <op-script-results> {
	message "bit:and(0011, 0101) -> " _ bit:and('0011', '0101');
	message "bit:and(0, 0) -> " _ bit:and(0, 0);
	message "bit:and(0, 1) -> " _ bit:and(0, 1);
	message "bit:and(1, 0) -> " _ bit:and(1, 0);
	message "bit:and(1, 1) -> " _ bit:and(1, 1);

	message "bit:nand(0011, 0101) -> " _ bit:nand('0011', '0101');
	message "bit:nand(0, 0) -> " _ bit:nand(0, 0);
	message "bit:nand(0, 1) -> " _ bit:nand(0, 1);
	message "bit:nand(1, 0) -> " _ bit:nand(1, 0);
	message "bit:nand(1, 1) -> " _ bit:nand(1, 1);

	message "bit:nor(0011, 0101) -> " _ bit:nor('0011', '0101');
	message "bit:nor(0, 0) -> " _ bit:nor(0, 0);
	message "bit:nor(0, 1) -> " _ bit:nor(0, 1);
	message "bit:nor(1, 0) -> " _ bit:nor(1, 0);
	message "bit:nor(1, 1) -> " _ bit:nor(1, 1);

	message "bit:not(0011) -> " _ bit:not('0011');
	message "bit:not(0) -> " _ bit:not(0);
	message "bit:not(1) -> " _ bit:not(1);
	message "bit:not(01) -> " _ bit:not('01');
	message "bit:not(10) -> " _ bit:not('10');
	message "bit:not(0000) -> " _ bit:not('0000');
	message "bit:not(1111) -> " _ bit:not('1111');

	message "bit:or(0011, 0101) -> " _ bit:or('0011', '0101');
	message "bit:or(0, 0) -> " _ bit:or(0, 0);
	message "bit:or(0, 1) -> " _ bit:or(0, 1);
	message "bit:or(1, 0) -> " _ bit:or(1, 0);
	message "bit:or(1, 1) -> " _ bit:or(1, 1);

	message "bit:xnor(0011, 0101) -> " _ bit:xnor('0011', '0101');
	message "bit:xnor(0, 0) -> " _ bit:xnor(0, 0);
	message "bit:xnor(0, 1) -> " _ bit:xnor(0, 1);
	message "bit:xnor(1, 0) -> " _ bit:xnor(1, 0);
	message "bit:xnor(1, 1) -> " _ bit:xnor(1, 1);

	message "bit:xor(0011, 0101) -> " _ bit:xor('0011', '0101');
	message "bit:xor(0, 0) -> " _ bit:xor(0, 0);
	message "bit:xor( 0, 1) -> " _ bit:xor( 0, 1);
	message "bit:xor( 1, 0) -> " _ bit:xor( 1, 0);
	message "bit:xor( 1, 1) -> " _ bit:xor( 1, 1);

	message "bit:mask(8, 32) -> " _ bit:mask(8, 32);
	message "bit:mask(1, 0) -> " _ bit:mask(1, 0);
	message "bit:mask(8) -> " _ bit:mask(8);
	message "bit:mask(4) -> " _ bit:mask(4);
	message "bit:mask(7) -> " _ bit:mask(7);

	message "bit:to-int(11111111) -> " _ bit:to-int('11111111');
	message "bit:to-int(00) -> " _ bit:to-int('00');
	message "bit:to-int(01) -> " _ bit:to-int('01');
	message "bit:to-int(10) -> " _ bit:to-int('10');
	message "bit:to-int(11) -> " _ bit:to-int('11');

	message "bit:from-int(0) -> " _ bit:from-int(0);
	message "bit:from-int(1) -> " _ bit:from-int(1);
	message "bit:from-int(2) -> " _ bit:from-int(2);
	message "bit:from-int(3) -> " _ bit:from-int(3);
	message "bit:from-int(255) -> " _ bit:from-int(255);
	message "bit:from-int(255, 16) -> " _ bit:from-int(255, 16);

	message "bit:to-hex(0000) -> " _ bit:to-hex('0000');
	message "bit:to-hex(0001) -> " _ bit:to-hex('0001');
	message "bit:to-hex(0010) -> " _ bit:to-hex('0010');
	message "bit:to-hex(0011) -> " _ bit:to-hex('0011');
	message "bit:to-hex(0100) -> " _ bit:to-hex('0100');
	message "bit:to-hex(0101) -> " _ bit:to-hex('0101');
	message "bit:to-hex(0110) -> " _ bit:to-hex('0110');
	message "bit:to-hex(0111) -> " _ bit:to-hex('0111');
	message "bit:to-hex(1000) -> " _ bit:to-hex('1000');
	message "bit:to-hex(1001) -> " _ bit:to-hex('1001');
	message "bit:to-hex(1010) -> " _ bit:to-hex('1010');
	message "bit:to-hex(1011) -> " _ bit:to-hex('1011');
	message "bit:to-hex(1100) -> " _ bit:to-hex('1100');
	message "bit:to-hex(1101) -> " _ bit:to-hex('1101');
	message "bit:to-hex(1110) -> " _ bit:to-hex('1110');
	message "bit:to-hex(1111) -> " _ bit:to-hex('1111');

	message "bit:from-hex('0x0') -> " _ bit:from-hex('0x0');
	message "bit:from-hex('0x1') -> " _ bit:from-hex('0x1');
	message "bit:from-hex('0x2') -> " _ bit:from-hex('0x2');
	message "bit:from-hex('0x3') -> " _ bit:from-hex('0x3');
	message "bit:from-hex('0x4') -> " _ bit:from-hex('0x4');
	message "bit:from-hex('0x5') -> " _ bit:from-hex('0x5');
	message "bit:from-hex('0x6') -> " _ bit:from-hex('0x6');
	message "bit:from-hex('0x7') -> " _ bit:from-hex('0x7');
	message "bit:from-hex('0x8') -> " _ bit:from-hex('0x8');
	message "bit:from-hex('0x9') -> " _ bit:from-hex('0x9');
	message "bit:from-hex('0xA') -> " _ bit:from-hex('0xA');
	message "bit:from-hex('0xB') -> " _ bit:from-hex('0xB');
	message "bit:from-hex('0xC') -> " _ bit:from-hex('0xC');
	message "bit:from-hex('0xD') -> " _ bit:from-hex('0xD');
	message "bit:from-hex('0xE') -> " _ bit:from-hex('0xE');
	message "bit:from-hex('0xF') -> " _ bit:from-hex('0xF');


	/* Large numbers */
	message "bit:from-int(4.2e20) -> " _ bit:from-int(4.2e10);
	message "bit:from-int(4.2e30) -> " _ bit:from-int(4.2e30);
	message "bit:from-int(4.2e40) -> " _ bit:from-int(4.2e40);
	message "bit:from-int(4.2e60) -> " _ bit:from-int(4.2e60);

	message "bit:to-int(32767999) -> " _ bit:to-int(32767999);
	message "bit:to-int(32768001) -> " _ bit:to-int(32768001);
	message "bit:to-int(327680012) -> " _ bit:to-int(327680012);
	message "bit:to-int(3276800123) -> " _ bit:to-int(3276800123);
	message "bit:to-int(32768001234) -> " _ bit:to-int(32768001234);
	message "bit:to-int(-1) -> " _ bit:to-int(-1);
     }
}
