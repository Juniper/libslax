version 1.2;


/* This stylesheet will:
- reorder, indent and normalize a comps file,
- merge duplicate groups and categories,
- warn about packages referenced by multiple groups,
- kill multiple references to the same package within a group,

Typical usage is:
$ xsltproc -o output-file comps-cleanup.xsl original-file

You can use the ‑‑novalid xsltproc switch to kill the warning about
Fedora not installing the comps DTD anywhere xsltproc can find it.
However without DTD there is no way to check the files completely.

© Nicolas Mailhot <nim at fedoraproject dot org> 2006 */
ns exsl extension = "http://exslt.org/common";

strip-space *;
output-method xml {
    indent "yes";
    encoding "UTF-8";
    doctype-system "comps.dtd";
    doctype-public "-//Red Hat, Inc.//DTD Comps info//EN";
}

key unique-groups {
    match /comps/group;
    value id/text();
}

key unique-categories {
    match /comps/category;
    value id/text();
}

key packages-by-group {
    match /comps/group/packagelist/packagereq;
    value ../../id/text();
}

key unique-package-entries {
    match /comps/group/packagelist/packagereq;
    value ../../id/text() _ "/" _ text();
}

key unique-packages {
    match /comps/group/packagelist/packagereq[generate-id(.) == generate-id(key("unique-package-entries", ../../id/text() _ "/" _ text())[1])];
    value text();
}

key groups-by-category {
    match /comps/category/grouplist/groupid;
    value ../../id/text();
}

key unique-group-entries {
    match /comps/category/grouplist/groupid;
    value ../../id/text() _ "/" _ text();
}
var $lcletters = "abcdefghijklmnopqrstuvwxyz";
var $ucletters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
var $type-sort-order = {
    <unknown>;
    <mandatory>;
    <conditional>;
    <default>;
    <optional>;
}
var $attribute-sort-order = {
    <unknown>;
    <type>;
    <requires>;
    <basearch>;
}
/* Preserve most nodes */
match * {
    priority 0;
    
    apply-templates . {
        mode "normalize";
    }
}

match * {
    mode "normalize";
    
    /* Group comments with the logically-following element */
    apply-templates preceding-sibling::node()[normalize-space()][1][self::comment()];
    copy-node {
        apply-templates @* {
            sort count(exsl:node-set($attribute-sort-order)/*[name() = name(current())]/preceding-sibling::*) {
                data-type "number";
            }
        }
        apply-templates * | text();
    }
}
/* Preserve attributes and text nodes */
match comment() | text() {
    apply-templates preceding-sibling::node()[normalize-space()][1][self::comment()];
    copy-node;
}
/* Preserve attributes */
match @* {
    copy-node;
}
/* Sort groups by id, and categories by display order */
match comps {
    priority 1;
    
    apply-templates preceding-sibling::node()[normalize-space()][1][self::comment()];
    copy-node {
        apply-templates group {
            sort translate(id/text(),$lcletters,$ucletters);
        }
        apply-templates category {
            sort display_order/text();
            sort translate(id/text(),$lcletters,$ucletters);
        }
    }
}
/* Warn about empty groups */
match group[count(key("packages-by-group", id/text())) == 0] {
    priority 2;
    
    message {
        expr "☹☹☹ Empty group ";
        expr _name/text() _ " (" _ id/text() _ ")";
        expr "!";
    }
    apply-templates . {
        mode "normalize";
    }
}
/* Warn about duplicate groups being merged */
match group[generate-id(.) != generate-id(key("unique-groups", id/text())[1])] {
    priority 3;
    
    message {
        expr " ☹☹ Duplicate group ";
        expr _name/text() _ " (" _ id/text() _ ")";
        expr " will be merged.";
    }
}
/* Warn about empty categories */
match category[count(key("groups-by-category", id/text())) == 0] {
    priority 2;
    
    message {
        expr "☹☹☹ Empty category ";
        expr _name/text() _ " (" _ id/text() _ ")";
        expr "!";
    }
    apply-templates . {
        mode "normalize";
    }
}
/* Warn about duplicate categories being merged */
match category[generate-id(.) != generate-id(key("unique-categories", id/text())[1])] {
    priority 3;
    
    message {
        expr " ☹☹ Duplicate category ";
        expr _name/text() _ " (" _ id/text() _ ")";
        expr " will be merged.";
    }
}
/* Sort packages within a group by class then name */
match packagelist {
    priority 1;
    
    copy-node {
        apply-templates key("packages-by-group", ../id/text()) {
            sort count(exsl:node-set($type-sort-order)/*[name() = current()/@type]/preceding-sibling::*) {
                data-type "number";
            }
            sort translate(text(),$lcletters,$ucletters);
        }
    }
}
/* Sort groups within a category by name */
match category/grouplist {
    priority 1;
    
    copy-node {
        apply-templates key("groups-by-category", ../id/text()) {
            sort translate(text(),$lcletters,$ucletters);
        }
    }
}
/* Kill duplicate package entries */
match packagereq[generate-id(.) != generate-id(key("unique-package-entries", ../../id/text() _ "/" _ text())[1])] {
    priority 2;
    
    message {
        expr "☹☹☹ Ignoring duplicate reference to ";
        expr @type _ " package " _ text();
        expr " in group ";
        expr ../../_name/text() _ " (" _ ../../id/text() _ ")";
        expr ".";
    }
    message {
        expr "     ⇒ Only its first reference (";
        expr key("unique-package-entries", ../../id/text() _ "/" _ text())[1]/@type;
        expr " package) will be kept.";
    }
}
/* Kill duplicate group entries */
match category/grouplist/groupid[generate-id(.) != generate-id(key("unique-group-entries", ../../id/text() _ "/" _ text())[1])] {
    priority 1;
    
    message {
        expr "  ☹ Ignoring duplicate reference to group ";
        expr text();
        expr " in category ";
        expr ../../_name/text() _ " (" _ ../../id/text() _ ")";
        expr ".";
    }
}

/* Warn about packages referenced several times
<xsl:template match="packagereq[generate-id(.) = generate-id(key('unique-packages',text())[2])]" priority="1">
<xsl:variable name="dupes" select="key('unique-packages',text())"/>
<xsl:message>  ☹ Package <xsl:value-of select="text()"/> is referenced in <xsl:value-of select="count($dupes)"/> groups:</xsl:message>
<xsl:for-each select="$dupes">
<xsl:sort select="translate(../../id/text(),$lcletters,$ucletters)"/>
<xsl:message>     ✓ <xsl:value-of select="@type"/> package in group <xsl:value-of select="concat(../../_name/text(),' (',../../id/text(),')')"/></xsl:message>
</xsl:for-each>
<xsl:apply-templates select="." mode="normalize"/>
</xsl:template> */
