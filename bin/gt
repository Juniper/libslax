#!/bin/sh
#
# Copyright 2013, Juniper Networks, Inc.
# All rights reserved.
# This SOFTWARE is licensed under the LICENSE provided in the
# ../Copyright file. By downloading, installing, copying, or otherwise
# using the SOFTWARE, you agree to be bound by the terms of that
# LICENSE.

op="$1"
shift

set_branch () {
    branch=`git branch -q | awk '/\*/ {print $2}'`
}

check_in_details () {
    set_branch
    files=`git status -s "$@" | awk '{print $2}'`

    for file in $files; do
	git diff $file
        status=`git status -s "$file"`
	echo $status

        /bin/echo "[Checking $file into branch $branch]"
        /bin/echo -n "Commit message: "
	read comment
	if [ "$comment" = "==" -o  "$comment" = "=" -o "$comment" = "ditto" ]; then
	    comment="$last"
        fi
	if [ "$comment" = "" ]; then
	    echo "Skipping file $file";
	else
	    if [ "$status" = "?? $file" ]; then
		git add "$file"
	    fi
	    git commit -m "$comment" "$file"
	fi
	last="$comment"
    done
}

push_to_branch () {
    echo "Pushing to $branch ..."
    git push origin $branch
}

case "$op" in
    archive)
        url=`git config --get remote.origin.url`
	base=`basename "$url" .git`
        tag=`git tag -l 'v*' | sed 's/^v//'`
	git archive --prefix=$base-$tag --format=tar HEAD | gzip > $base-$tag.tgz
	;;

    br)
        set_branch
        if [ x"$1" = x ]; then
	    echo $branch
	elif [ x"$1" = xnew ]; then
	    git checkout -b "$2" $branch
	elif [ x"$1" = xls ]; then
	    git branch --list
	else
	    git checkout "$@"
	fi
	;;

    checkin|check|checkpoint)
        git diff $file
        git status -s "$@"

	opts=
	if [ x"$@" = x ]; then
	    opts=-a
	fi

        /bin/echo -n "Commit message: "
	read comment
	if [ "$comment" = "" ]; then
	    echo "Commit aborted"
	else
  	    git commit -m "$comment" "$@"
	fi
	;;

    check-in-details|ci|cid)
        check_in_details "$@"
	;;

    commit)
        set_branch
        check_in_details "$@"
	push_to_branch
	;;

    diff|dif|delta)
        git diff "$@"
	;;

    info)
	git remote -v
        git remote -v show origin
        ;;

    clog)
       colors='--format=format:%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'
	git log --graph --abbrev-commit --decorate --all "${colors}" "$@"
        echo ''
	;;

    log)
        git log "$@"
        ;;

    make-gh-pages)
        url=`git config --get remote.origin.url`
	base=`basename "$url" .git`
        mkdir -p gh-pages
	git clone $url -b gh-pages gh-pages
	cd gh-pages
        git branch -u origin/gh-pages
	;;

    create-gh-pages)
        url=`git config --get remote.origin.url`
	base=`basename "$url" .git`
        mkdir -p gh-pages
	git clone $url gh-pages
	cd gh-pages
        git checkout --orphan gh-pages
        echo "clone gh-pages into gh-page; 'cd gh-pages && gt rm -fr .' to clean it"
        ;;

    merge-to)
        set_branch
        to=$1
        if [ x"$to" = x ]; then
            echo "missing branch name"
            exit 1
        fi
	echo "Merging $branch into $to ..."
	echo "Switching to $to ..."
        git checkout $to
	if [ $? -eq 0 ]; then
	    git merge --no-ff $branch
	    if [ $? -eq 0 ]; then
		echo "Pushing to $to ..."
		git push origin $to
	    fi
	    git checkout $branch
	fi
        ;;

    merge|merge-from)
        set_branch
        from=$1
        if [ x"$from" = x ]; then
            echo "missing branch name"
            exit 1
        fi
	echo "Merging $from into $branch ..."
	git -c core.editor=/usr/bin/true merge --no-ff $from
	if [ $? -eq 0 ]; then
	    push_to_branch
	fi
        ;;

    merge-softly-from)
        set_branch
        from=$1
        if [ x"$from" = x ]; then
            echo "missing branch name"
            exit 1
        fi
	echo "Merging $from into $branch ..."
	git -c core.editor=/usr/bin/true merge --no-ff $from
        ;;

    outstanding|out|what)
        set_branch
        git diff origin/$branch $branch
	;;

    push|pu|pom|pob)
	# Push all local changes to the origin/repo server
        set_branch
        push_to_branch
	;;

    push-test|pt|ptest)
	# Push all local changes to the origin/repo server
        set_branch
	git push --dry-run origin $branch
	;;

    ref|reflog)
        git reflog show
        ;;

    restash)
	set_branch
	git stash
	if [ $? -ne 0 ]; then
	    echo "stash failed"
	    exit 1
	fi
	git pull -v origin $branch
        if [ $? -ne 0 ]; then
            echo "'gt pull' failed"
            exit 1
        fi
	git stash pop
	;;

    st|stat|status)
	# Show status
	git status -s "$@"
	;;

    tag|add-tag)
	# Tag source code with revision number
        # If you make a tag like "0.15.0", then you can
        # use an URL like:
        # https://github.com/Juniper/libslax/archive/0.15.0.tar.gz
        if [ x"$@" = x"" ]; then
	    git tag -n5
	    exit 0
        fi

	DATE=`date "+%Y-%m-%d/%H:%M:%S"`
	git tag -a -m "[$DATE]" "$@"
	if [ $? -eq 0 ]; then
	    git push origin --tags $branch
	fi
	;;

    up|update|pull)
	# Update working copy with repo's changes
	set_branch
	git pull -v origin $branch
	;;

    *)
	# Anything else get passed on directly
	git "$op" "$@"
	;;
esac

exit $?
