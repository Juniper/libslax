#!/bin/sh -e

function find_git_dir {
    GIT_DIR="$PWD"
    while true; do
	if [ -d "$GIT_DIR"/.git ]; then
	    return;
	fi
	GIT_DIR=`dirname "$GIT_DIR"`
	if [ x"$GIT_DIR" = x"/" ]; then
	    echo "Not running inside a git repository"
	    exit 1
	fi
    done
}

function find_version {
    # grep AC_INIT $GIT_DIR/configure.ac
    VERS=`grep AC_INIT $GIT_DIR/configure.ac \
	| awk -F[ '{print $3}' | sed 's/].*//'`
}

function get_log_comments {
    echo "Commit log:"
    git log ${1}...${2} \
	| grep '^ ' | sort -u \
	| sed -e 's/^ */- /' -e "/^ - Merge branch '/d"
}

function bump_version {
    find_version
    OLD_VERSION=$VERS

    vi $GIT_DIR/configure.ac

    find_version
    NEW_VERSION=$VERS

    echo "previous version: " $OLD_VERSION
    echo "new version:      " $NEW_VERSION
}

function run {
    desc="$1"
    cmd="$2"

    if [ x"$DOC" = xdoc ]; then
	echo " - $desc"
        echo "   - $cmd"
    else
        echo "===="
        echo "Phase: $desc"
        echo "  Run: $cmd"
        okay
	# We need to eval to handle "&&" in commands
        eval $cmd
        okay
    fi
}

function okay {
   /bin/echo -n "proceed? "
   read OKAY
   if [ x"$OKAY" = xn -o  x"$OKAY" = xno ]; then
      echo "okay; exiting"
      exit 1;
   fi
}

if [ "$1" = "-d" ]; then
    DOC=doc
    shift;
fi

PROJECT="$1"
if [ -z "$PROJECT" ]; then
    echo "Usage: new-release <project-name> (e.g. libslax)"
    exit 1
fi

find_git_dir

if [ ! -f $GIT_DIR/configure.ac ]; then
    echo "$GIT_DIR/configure.ac not found"
    exit 1
fi

echo "GIT_DIR is $GIT_DIR"
find_version
echo "Current version is $VERS"

echo "Starting new release::"

run "commit any changes" "gt commit"
run "move to main branch" "gt br main"
run "merge development changes into main" "gt merge-from develop"
run "bump version number in configure.ac" "bump_version"

cd $GIT_DIR
run "autoconf" "autoreconf --install"
cd $GIT_DIR/build
run "configure" "../configure $CONFIGURE_OPTS"
run "build and test" \
    "make clean && make && make install && make test && make dist"
run "make distcheck" "make distcheck"

run "Commit any changes" "gt commit"

run "upload any documentation changes to gh-pages/" "make upload"
run "add the release tag" "gt tag $NEW_VERSION"
run "publish packaging data to gh-pages/" "make packages"

run "move back to develop branch" "gt br develop"
run "pick up changes for configure.ac" "gt merge-from main"

run "show diffs" "gt diff ${OLD_VERSION}...${NEW_VERSION}"
get_log_comments $OLD_VERSION $NEW_VERSION

run "goto https://github.com/Juniper/$PROJECT/releases" "open https://github.com/Juniper/$PROJECT/releases"

echo "Do not forget to copy $PROJECT-${NEW_VERSION}.tar.gz to the release page"

exit 0
